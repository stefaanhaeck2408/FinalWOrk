// <auto-generated />
using DL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191106130009_newDomainModel")]
    partial class newDomainModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DL.Models.IngevoerdAntwoord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GescoordeScore")
                        .HasColumnType("int");

                    b.Property<string>("JsonAntwoord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("VraagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("VraagId");

                    b.ToTable("IngevoerdAntwoorden");
                });

            modelBuilder.Entity("DL.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quizen");
                });

            modelBuilder.Entity("DL.Models.QuizRondeTussentabel", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("RondeId")
                        .HasColumnType("int");

                    b.HasIndex("QuizId");

                    b.HasIndex("RondeId");

                    b.ToTable("QuizROndeTussentabellen");
                });

            modelBuilder.Entity("DL.Models.QuizTeamTussentabel", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasIndex("QuizId");

                    b.HasIndex("TeamId");

                    b.ToTable("QuizTeamTussentabellen");
                });

            modelBuilder.Entity("DL.Models.Ronde", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ronden");
                });

            modelBuilder.Entity("DL.Models.RondeVraagTussentabel", b =>
                {
                    b.Property<int>("RondeId")
                        .HasColumnType("int");

                    b.Property<int>("VraagId")
                        .HasColumnType("int");

                    b.HasIndex("RondeId");

                    b.HasIndex("VraagId");

                    b.ToTable("RondeVraagTussentabellen");
                });

            modelBuilder.Entity("DL.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DL.Models.TypeVraag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeVragen");
                });

            modelBuilder.Entity("DL.Models.Vraag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JsonCorrecteAntwoord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonMogelijkeAntwoorden")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxScoreVraag")
                        .HasColumnType("int");

                    b.Property<int>("TypeVraagId")
                        .HasColumnType("int");

                    b.Property<string>("VraagStelling")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TypeVraagId");

                    b.ToTable("Vragen");
                });

            modelBuilder.Entity("DL.Models.IngevoerdAntwoord", b =>
                {
                    b.HasOne("DL.Models.Team", "Team")
                        .WithMany("IngevoerdAntwoorden")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DL.Models.Vraag", "Vraag")
                        .WithMany()
                        .HasForeignKey("VraagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DL.Models.QuizRondeTussentabel", b =>
                {
                    b.HasOne("DL.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DL.Models.Ronde", "Ronde")
                        .WithMany()
                        .HasForeignKey("RondeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DL.Models.QuizTeamTussentabel", b =>
                {
                    b.HasOne("DL.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DL.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DL.Models.RondeVraagTussentabel", b =>
                {
                    b.HasOne("DL.Models.Ronde", "Ronde")
                        .WithMany()
                        .HasForeignKey("RondeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DL.Models.Vraag", "Vraag")
                        .WithMany()
                        .HasForeignKey("VraagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DL.Models.Vraag", b =>
                {
                    b.HasOne("DL.Models.TypeVraag", "TypeVraag")
                        .WithMany()
                        .HasForeignKey("TypeVraagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
